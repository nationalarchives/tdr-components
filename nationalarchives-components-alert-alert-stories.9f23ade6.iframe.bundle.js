(self.webpackChunk_nationalarchives_tdr_components=self.webpackChunk_nationalarchives_tdr_components||[]).push([[697],{"./src/nationalarchives/components/alert/alert.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Error:()=>Error,Neutral:()=>Neutral,Success:()=>Success,WithHeading:()=>WithHeading,WithIcon:()=>WithIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>alert_stories});__webpack_require__("./src/nationalarchives/components/icon/_index.scss");var injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),alert_index=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[14].use[2]!./src/nationalarchives/components/alert/_index.scss"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(alert_index.A,options);alert_index.A&&alert_index.A.locals&&alert_index.A.locals;var icon_stories=__webpack_require__("./src/nationalarchives/components/icon/icon.stories.ts"),story=__webpack_require__("./src/nationalarchives/components/alert/story.njk"),story_default=__webpack_require__.n(story);const alert_stories={title:"TDR/Alert",args:{alertType:"info",withIcon:!1,headingText:"",bodyText:"Once uploaded, we will check your metadata for errors. There will be a chance to review and re-upload the metadata before completing the transfer.",headingSize:"l",iconType:"info"},argTypes:{iconType:{control:"select",options:[...icon_stories.default.argTypes.iconType.options]},headingSize:{control:"select",options:{Large:"l",Small:"s"}},alertType:{control:"select",options:{Neutral:"default",Information:"info",Success:"success",Error:"error"}}}},Template=({...args})=>(args=>story_default()({test:"something",params:{...args}}))({...args}),Default=Template.bind({}),WithHeading=Template.bind({});WithHeading.args={alertType:"info",withIcon:!1,headingSize:"l",headingText:"Leaving and returning to this transfer",bodyText:'You can leave this transfer and return to upload your metadata once you have completed your template. In progress transfers are accessible from the <a class="govuk-link" href="#">View Transfers</a> page.',iconType:"exit"};const WithIcon=Template.bind({});WithIcon.args={alertType:"info",withIcon:!0,headingSize:"l",headingText:"Leaving and returning to this transfer",bodyText:'You can leave this transfer and return to upload your metadata once you have completed your template. In progress transfers are accessible from the <a class="govuk-link" href="#">View Transfers</a> page.',iconType:"exit"};const Neutral=Template.bind({});Neutral.args={alertType:"default",withIcon:!0,headingSize:"l",headingText:"Your review is in progress",bodyText:"When the review is complete you will receive an email to <strong>jesse@ons.gov.uk</strong> with further instructions.",iconType:"search"};const Error=Template.bind({});Error.args={alertType:"error",withIcon:!0,headingSize:"l",headingText:"We found issues in your metadata",bodyText:"We have emailed guidance to <strong>jesse@ons.gov.uk</strong>",iconType:"warning"};const Success=Template.bind({});Success.args={alertType:"success",withIcon:!0,headingSize:"l",headingText:"You can now complete your transfer",bodyText:"The metadata you submitted has been reviewed and no issues were found.",iconType:"check"};const __namedExportsOrder=["Default","WithHeading","WithIcon","Neutral","Error","Success"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...Default.parameters?.docs?.source}}},WithHeading.parameters={...WithHeading.parameters,docs:{...WithHeading.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...WithHeading.parameters?.docs?.source}}},WithIcon.parameters={...WithIcon.parameters,docs:{...WithIcon.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...WithIcon.parameters?.docs?.source}}},Neutral.parameters={...Neutral.parameters,docs:{...Neutral.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...Neutral.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...Error.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:"({\n  ...args\n}): string => {\n  return create({\n    ...args\n  });\n}",...Success.parameters?.docs?.source}}}},"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[14].use[2]!./src/nationalarchives/components/alert/_index.scss":(module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".da-alert{color:#0b0c0c;padding:15px;margin-top:20px;margin-bottom:20px;clear:both;border-left:10px solid #b1b4b6;border-color:#2b8cc4;background-color:#dbeff9}@media print{.da-alert{color:#000}}@media(min-width: 40.0625em){.da-alert{margin-top:30px}}@media(min-width: 40.0625em){.da-alert{margin-bottom:30px}}.da-alert>:first-child{margin-top:0}.da-alert>:only-child,.da-alert>:last-child{margin-bottom:0}.da-alert--success{border-color:#28a197;background-color:#c6ece9}.da-alert--error{border-color:#c42b2b;background-color:#f3dede}.da-alert--info{border-color:#fcdba9;background-color:#fcf5ea}.da-alert:first-child{margin-top:0}.da-alert:last-child{margin-bottom:0}.da-alert__heading{font-size:1.125rem;line-height:1.1111111111;margin-bottom:15px}@media(min-width: 40.0625em){.da-alert__heading{font-size:1.5rem;line-height:1.25}}@media print{.da-alert__heading{font-size:18pt;line-height:1.15}}.da-alert__heading--s{font-size:1rem;line-height:1.25;margin-bottom:10px}@media(min-width: 40.0625em){.da-alert__heading--s{font-size:1.1875rem;line-height:1.3157894737}}@media print{.da-alert__heading--s{font-size:14pt;line-height:1.15}}.da-alert .da-alert__icon svg.da-icon{fill:#174e75}.da-alert--success .da-alert__icon svg.da-icon{fill:#1b7069}.da-alert--error .da-alert__icon svg.da-icon{fill:#831d1d}.da-alert--info .da-alert__icon svg.da-icon{fill:#985e05}.da-alert--with-icon{display:flex;gap:20px}.da-alert__icon>.da-icon{margin-top:5px;margin-left:5px}.da-alert__content>p{font-size:1rem;line-height:1.25}@media(min-width: 40.0625em){.da-alert__content>p{font-size:1.1875rem;line-height:1.3157894737}}@media print{.da-alert__content>p{font-size:14pt;line-height:1.15}}.da-alert__content>*:first-child{margin-top:0}.da-alert__content>*:last-child{margin-bottom:0}","",{version:3,sources:["webpack://./src/nationalarchives/components/alert/_index.scss","webpack://./node_modules/govuk-frontend/dist/govuk/helpers/_typography.scss","webpack://./node_modules/govuk-frontend/dist/govuk/settings/_colours-applied.scss","webpack://./node_modules/govuk-frontend/dist/govuk/helpers/_spacing.scss","webpack://./node_modules/govuk-frontend/dist/govuk/vendor/_sass-mq.scss"],names:[],mappings:"AAMA,UC+BE,aCfkB,CFblB,YAAA,CGiGM,eAAA,CAAA,kBAAA,CH1FN,UAAA,CACA,8BAAA,CAWA,oBAAA,CACA,wBAAA,CIuMM,aJ9NR,UCkCI,UCQsB,CAAA,CEoLlB,6BJ9NR,UG2GU,eAAA,CAAA,CCmHF,6BJ9NR,UG2GU,kBAAA,CAAA,CH9FR,uBACE,YAAA,CAGF,4CAEE,eAAA,CAMF,mBACE,oBAAA,CACA,wBAAA,CAGF,iBACE,oBAAA,CACA,wBAAA,CAGF,gBACE,oBAAA,CACA,wBAAA,CAGF,sBG4DM,YAAA,CHxDN,qBGwDM,eAAA,CHpDN,mBCyLI,kBAJc,CAKd,wBAJuB,CElIrB,kBAAA,CC0HA,6BJ9KN,mBCkMM,gBAbY,CAcZ,gBAbqB,CAAA,CGRrB,aJ9KN,mBC6LM,cATQ,CAUR,gBARqB,CAAA,CDjL3B,sBCoLI,cAJc,CAKd,gBAJuB,CElIrB,kBAAA,CC0HA,6BJzKN,sBC6LM,mBAbY,CAcZ,wBAbqB,CAAA,CGRrB,aJzKN,sBCwLM,cATQ,CAUR,gBARqB,CAAA,CD5K3B,sCACE,YAAA,CAGF,+CACE,YAAA,CAGF,6CACE,YAAA,CAGF,4CACE,YAAA,CAIJ,qBACE,YAAA,CACA,QAAA,CAGF,yBGoBQ,cAAA,CAAA,eAAA,CHdN,qBCmJI,cAJc,CAKd,gBAJuB,CGRrB,6BJxIN,qBC4JM,mBAbY,CAcZ,wBAbqB,CAAA,CGRrB,aJxIN,qBCuJM,cATQ,CAUR,gBARqB,CAAA,CD5I3B,iCGUM,YAAA,CHNN,gCGMM,eAAA",sourcesContent:['\n              @import "govuk-frontend/dist/govuk/base";\n              @import "govuk-frontend/dist/govuk/settings/all";\n              @import "govuk-frontend/dist/govuk/tools/all";\n              @import "govuk-frontend/dist/govuk/helpers/all";\n            \n.da-alert {\n  @include govuk-text-colour;\n\n  padding: govuk-spacing(3);\n\n  // Margin top intended to collapse\n  // This adds an additional 10px to the paragraph above\n  @include govuk-responsive-margin(6, "top");\n  @include govuk-responsive-margin(6, "bottom");\n\n  clear: both;\n  border-left: $govuk-border-width-wide solid $govuk-border-colour;\n\n  > :first-child {\n    margin-top: 0;\n  }\n\n  > :only-child,\n  > :last-child {\n    margin-bottom: 0;\n  }\n\n  border-color: #2b8cc4;\n  background-color: #dbeff9;\n\n  &--success {\n    border-color: #28a197;\n    background-color: #c6ece9;\n  }\n\n  &--error {\n    border-color: #c42b2b;\n    background-color: #f3dede;\n  }\n\n  &--info {\n    border-color: #fcdba9;\n    background-color: #fcf5ea;\n  }\n\n  &:first-child {\n    @include govuk-responsive-margin(0, "top");\n  }\n\n  &:last-child {\n    @include govuk-responsive-margin(0, "bottom");\n  }\n\n  &__heading {\n    @include govuk-typography-responsive(24);\n    @include govuk-responsive-margin(3, "bottom");\n  }\n\n  &__heading--s {\n    @include govuk-typography-responsive(19);\n    @include govuk-responsive-margin(2, "bottom");\n  }\n\n  .da-alert__icon svg.da-icon {\n    fill: #174e75;\n  }\n\n  &--success .da-alert__icon svg.da-icon {\n    fill: #1b7069;\n  }\n\n  &--error .da-alert__icon svg.da-icon {\n    fill: #831d1d;\n  }\n\n  &--info .da-alert__icon svg.da-icon {\n    fill: #985e05;\n  }\n}\n\n.da-alert--with-icon {\n  display: flex;\n  gap: 20px;\n}\n\n.da-alert__icon > .da-icon {\n  @include govuk-responsive-margin(1, "top");\n  @include govuk-responsive-margin(1, "left");\n}\n\n.da-alert__content {\n  > p {\n    @include govuk-typography-responsive(19);\n  }\n\n  > *:first-child {\n    @include govuk-responsive-margin(0, "top");\n  }\n\n  > *:last-child {\n    @include govuk-responsive-margin(0, "bottom");\n  }\n}\n','////\n/// @group helpers/typography\n////\n\n@import "../tools/px-to-rem";\n\n/// \'Common typography\' helper\n///\n/// Sets the font family and associated properties, such as font smoothing. Also\n/// overrides the font for print.\n///\n/// @param {List} $font-family [$govuk-font-family] Font family to use\n/// @access public\n\n@mixin govuk-typography-common($font-family: $govuk-font-family) {\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  @if $govuk-include-default-font-face {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n}\n\n/// Text colour helper\n///\n/// Sets the text colour, including a suitable override for print.\n///\n/// @access public\n\n@mixin govuk-text-colour {\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n}\n\n/// Regular font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-regular($important: false) {\n  font-weight: $govuk-font-weight-regular if($important, !important, null);\n}\n\n/// Bold font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-bold($important: false) {\n  font-weight: $govuk-font-weight-bold if($important, !important, null);\n}\n\n/// Tabular number helper\n///\n/// Switches numerical glyphs (0–9) to use alternative forms with a\n/// monospaced bounding box. This ensures that columns of numbers, such\n/// as those in tables, remain horizontally aligned with one another.\n/// This also has the useful side effect of making numbers more legible\n/// in some situations, such as reference codes, as the numbers are more\n/// distinct and visually separated from one another.\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-font-tabular-numbers($important: false) {\n  font-variant-numeric: tabular-nums if($important, !important, null);\n}\n\n/// Word break helper\n///\n/// Forcibly breaks long words that lack spaces, such as email addresses,\n/// across multiple lines when they wouldn\'t otherwise fit.\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally used to create override classes.\n/// @access public\n\n@mixin govuk-text-break-word($important: false) {\n  // IE 11 and Edge 16–17 only support the non-standard `word-wrap` property\n  word-wrap: break-word if($important, !important, null);\n\n  // All other browsers support `overflow-wrap`\n  overflow-wrap: break-word if($important, !important, null);\n}\n\n/// Convert line-heights specified in pixels into a relative value, unless\n/// they are already unit-less (and thus already treated as relative values)\n/// or the units do not match the units used for the font size.\n///\n/// @param {Number} $line-height Line height\n/// @param {Number} $font-size Font size\n/// @return {Number} The line height as either a relative value or unmodified\n///\n/// @access private\n\n@function _govuk-line-height($line-height, $font-size) {\n  @if not unitless($line-height) and unit($line-height) == unit($font-size) {\n    $line-height: $line-height / $font-size;\n  }\n\n  @return $line-height;\n}\n\n/// Font size and line height helper\n///\n/// @param {Number} $size - Point from the type scale (the size as it would\n///   appear on tablet and above)\n/// @param {Number} $override-line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @throw if `$size` is not a valid point from the type scale\n///\n/// @access public\n///\n/// @alias govuk-font-size\n/// @deprecated Use `govuk-font-size` instead\n\n@mixin govuk-typography-responsive($size, $override-line-height: false, $important: false) {\n  @include _warning(\n    "govuk-typography-responsive",\n    "govuk-typography-responsive is deprecated. Use govuk-font-size instead."\n  );\n  @include govuk-font-size($size, $override-line-height, $important);\n}\n\n/// Font size and line height helper\n///\n/// Takes a point from the responsive \'font map\' as an argument (the size as it\n/// would appear on tablet and above), and uses it to create font-size and\n/// line-height declarations for different breakpoints, and print.\n///\n/// Example font map:\n///\n/// ```scss\n/// 19: (\n///   null: (\n///     font-size: 16px,\n///     line-height: 20px\n///   ),\n///   tablet: (\n///     font-size: 19px,\n///     line-height: 25px\n///   ),\n///   print: (\n///     font-size: 14pt,\n///     line-height: 1.15\n///   )\n/// );\n/// ```\n///\n/// @param {Number | String} $size - Point from the type scale (the size as\n///   it would appear on tablet and above)\n/// @param {Number} $line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @throw if `$size` is not a valid point from the type scale\n///\n/// @access public\n\n@mixin govuk-font-size($size, $line-height: false, $important: false) {\n  // Flag font sizes that start with underscores so we can suppress warnings on\n  // deprecated sizes used internally, for example `govuk-font($size: "_14")`\n  $size-internal-use-only: str-slice(#{$size}, 1, 1) == "_";\n\n  // Remove underscore from font sizes flagged for internal use\n  @if $size-internal-use-only {\n    $size: str-slice(#{$size}, 2);\n  }\n\n  // Check for a font map exactly matching the given size\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  // No match? Try with string type (e.g. $size: "16" not 16)\n  @if not $font-map {\n    @each $font-size in map-keys($govuk-typography-scale) {\n      @if not $font-map and #{$font-size} == #{$size} {\n        $font-map: map-get($govuk-typography-scale, $font-size);\n      }\n    }\n  }\n\n  // Still no match? Throw error\n  @if not $font-map {\n    @error "Unknown font size `#{$size}` - expected a point from the type scale.";\n  }\n\n  // Check for a deprecation within the type scale\n  $deprecation: map-get($font-map, "deprecation");\n\n  @if $deprecation {\n    // Warn on deprecated font sizes unless flagged for internal use\n    @if not $size-internal-use-only {\n      @include _warning(map-get($deprecation, "key"), map-get($deprecation, "message"));\n    }\n\n    // remove the deprecation map keys so they do not break the breakpoint loop\n    $font-map: map-remove($font-map, "deprecation");\n  }\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, "font-size");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    // $calculated-line-height is a separate variable from $line-height,\n    // as otherwise the value would get redefined with each loop and\n    // eventually break _govuk-line-height.\n    //\n    // We continue to call the param $line-height to stay consistent with the\n    // naming with govuk-font.\n    $calculated-line-height: _govuk-line-height(\n      $line-height: if($line-height, $line-height, map-get($breakpoint-map, "line-height")),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size if($important, !important, null);\n    $font-size-rem: $font-size-rem if($important, !important, null);\n    $calculated-line-height: $calculated-line-height if($important, !important, null);\n\n    @if not $breakpoint {\n      font-size: $font-size-rem;\n      line-height: $calculated-line-height;\n    } @else if $breakpoint == "print" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $calculated-line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size-rem;\n        line-height: $calculated-line-height;\n      }\n    }\n  }\n}\n\n/// Font helper\n///\n/// @param {Number | Boolean | String} $size Point from the type scale (the\n///   size as it would appear on tablet and above). Use `false` to avoid setting\n///   a size.\n/// @param {String} $weight [regular] - Weight: `bold` or `regular`\n/// @param {Boolean} $tabular [false] - Whether to use tabular numbers or not\n/// @param {Number} $line-height [false] - Line-height, if overriding the\n///   default\n///\n/// @throw if `$size` is not a valid point from the type scale (or false)\n///\n/// @access public\n\n@mixin govuk-font($size, $weight: regular, $tabular: false, $line-height: false) {\n  @include govuk-typography-common;\n\n  @if $tabular {\n    @include govuk-font-tabular-numbers;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-font-size($size, $line-height);\n  }\n}\n\n/*# sourceMappingURL=_typography.scss.map */\n','////\n/// @group settings/colours\n////\n\n@import "../helpers/colour";\n\n// =========================================================\n// Generic\n// =========================================================\n\n/// Brand colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-brand-colour: govuk-colour("blue") !default;\n\n/// Text colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-text-colour: govuk-colour("black") !default;\n\n/// Canvas background colour\n///\n/// Used by the footer component and template to give the illusion of a long\n/// footer.\n///\n/// @type Colour\n/// @access public\n\n$govuk-canvas-background-colour: govuk-colour("light-grey") !default;\n\n/// Body background colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-body-background-colour: govuk-colour("white") !default;\n\n/// Text colour for print media\n///\n/// Use \'true black\' to avoid printers using colour ink to print body text\n///\n/// @type Colour\n/// @access public\n\n$govuk-print-text-colour: #000000 !default;\n\n/// Secondary text colour\n///\n/// Used in for example \'muted\' text and help text.\n///\n/// @type Colour\n/// @access public\n\n$govuk-secondary-text-colour: govuk-colour("dark-grey") !default;\n\n/// Focus colour\n///\n/// Used for outline (and background, where appropriate) when interactive\n/// elements (links, form controls) have keyboard focus.\n///\n/// @type Colour\n/// @access public\n\n$govuk-focus-colour: govuk-colour("yellow") !default;\n\n/// Focused text colour\n///\n/// Ensure that the contrast between the text and background colour passes\n/// WCAG Level AA contrast requirements.\n///\n/// @type Colour\n/// @access public\n\n$govuk-focus-text-colour: govuk-colour("black") !default;\n\n/// Error colour\n///\n/// Used to highlight error messages and form controls in an error state\n///\n/// @type Colour\n/// @access public\n\n$govuk-error-colour: govuk-colour("red") !default;\n\n/// Success colour\n///\n/// Used to highlight success messages and banners\n///\n/// @type Colour\n/// @access public\n\n$govuk-success-colour: govuk-colour("green") !default;\n\n/// Border colour\n///\n/// Used in for example borders, separators, rules and keylines.\n///\n/// @type Colour\n/// @access public\n\n$govuk-border-colour: govuk-colour("mid-grey") !default;\n\n/// Input border colour\n///\n/// Used for form inputs and controls\n///\n/// @type Colour\n/// @access public\n\n$govuk-input-border-colour: govuk-colour("black") !default;\n\n/// Input hover colour\n///\n/// Used for hover states on form controls\n///\n/// @type Colour\n/// @access public\n\n$govuk-hover-colour: govuk-colour("mid-grey") !default;\n\n// =============================================================================\n// Links\n// =============================================================================\n\n/// Link colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-link-colour: govuk-colour("blue") !default;\n\n/// Visited link colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-link-visited-colour: govuk-colour("purple") !default;\n\n/// Link hover colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-link-hover-colour: govuk-colour("dark-blue") !default;\n\n/// Active link colour\n///\n/// @type Colour\n/// @access public\n\n$govuk-link-active-colour: govuk-colour("black") !default;\n\n/*# sourceMappingURL=_colours-applied.scss.map */\n','////\n/// @group helpers/spacing\n////\n\n/// Single point spacing\n///\n/// Returns measurement corresponding to the spacing point requested.\n///\n/// @param {Number} $spacing-point - Point on the spacing scale\n///  (set in `settings/_spacing.scss`)\n///\n/// @returns {String} Spacing measurement eg. 10px\n///\n/// @example scss\n///   .element {\n///     padding: govuk-spacing(5);\n///   }\n///\n/// @example scss Using negative spacing\n///   .element {\n///     margin-top: govuk-spacing(-1);\n///   }\n///\n/// @example scss Marking spacing declarations as important\n///   .element {\n///     margin-top: govuk-spacing(1) !important;\n///   }\n///\n/// @access public\n\n@function govuk-spacing($spacing-point) {\n  $actual-input-type: type-of($spacing-point);\n  @if $actual-input-type != "number" {\n    @error "Expected a number (integer), but got a "\n      + "#{$actual-input-type}.";\n  }\n\n  $is-negative: false;\n  @if $spacing-point < 0 {\n    $is-negative: true;\n    $spacing-point: abs($spacing-point);\n  }\n\n  @if not map-has-key($govuk-spacing-points, $spacing-point) {\n    @error "Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.";\n  }\n\n  $value: map-get($govuk-spacing-points, $spacing-point);\n  @return if($is-negative, $value * -1, $value);\n}\n\n/// Responsive spacing\n///\n/// Adds responsive spacing (either padding or margin, depending on `$property`)\n/// by fetching a \'spacing map\' from the responsive spacing scale, which defines\n/// different spacing values at different breakpoints.\n///\n/// To generate responsive spacing, use \'govuk-responsive-margin\' or\n/// \'govuk-responsive-padding\' mixins\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n///   scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $property - Property to add spacing to (e.g. \'margin\')\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing by\n///\n/// @access private\n\n@mixin _govuk-responsive-spacing(\n  $responsive-spacing-point,\n  $property,\n  $direction: "all",\n  $important: false,\n  $adjustment: false\n) {\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != "number" {\n    @error "Expected a number (integer), but got a " + "#{$actual-input-type}.";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error "Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the "\n      + "responsive spacing scale in `_settings/spacing.scss`.";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != "map" {\n    @error "Expected a number (integer), but got a "\n      + "#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n    @if $adjustment {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The \'null\' breakpoint is for mobile.\n    @if not $breakpoint {\n      @if $direction == all {\n        #{$property}: $breakpoint-value if($important, !important, null);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value if($important, !important, null);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value if($important, !important, null);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value if($important, !important, null);\n        }\n      }\n    }\n  }\n}\n\n/// Responsive margin\n///\n/// Adds responsive margin by fetching a \'spacing map\' from the responsive\n/// spacing scale, which defines different spacing values at different\n/// breakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n///\n/// @see {mixin} _govuk-responsive-spacing\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n/// scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing by\n///\n/// @example scss\n///   .element {\n///      @include govuk-responsive-margin(6, "left", $adjustment: 1px);\n///   }\n///\n/// @access public\n\n@mixin govuk-responsive-margin($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {\n  @include _govuk-responsive-spacing($responsive-spacing-point, "margin", $direction, $important, $adjustment);\n}\n\n/// Responsive padding\n///\n/// Adds responsive padding by fetching a \'spacing map\' from the responsive\n/// spacing scale, which defines different spacing values at different\n/// breakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n///\n/// @see {mixin} _govuk-responsive-spacing\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n///   scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing\n///\n/// @example scss\n///   .element {\n///      @include govuk-responsive-padding(6, "left", $adjustment: 1px);\n///   }\n///\n/// @access public\n\n@mixin govuk-responsive-padding($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {\n  @include _govuk-responsive-spacing($responsive-spacing-point, "padding", $direction, $important, $adjustment);\n}\n\n/*# sourceMappingURL=_spacing.scss.map */\n',"// mq() v4.0.2\n// sass-mq/sass-mq\n\n@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body::before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n\n/*# sourceMappingURL=_sass-mq.scss.map */\n"],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/nationalarchives/components/alert/story.njk":(module,exports,__webpack_require__)=>{const runtime=__webpack_require__("./node_modules/simple-nunjucks-loader/lib/cjs/runtime.js"),__nunjucks_module_dependencies__={},__nunjucks_template_import__dep_0=__webpack_require__("./src/nationalarchives/components/alert/template.njk");function nunjucksTemplate(ctx={}){const templateContext={__nunjucks_loader_assets__:__nunjucks_module_dependencies__.assets,...ctx};var nunjucks=(runtime&&runtime.default||runtime)({dev:!1,jinjaCompat:!1,isAsyncTemplate:!1},__nunjucks_module_dependencies__);return nunjucks.isAsync()?nunjucks.renderAsync("src/nationalarchives/components/alert/story.njk",templateContext):nunjucks.render("src/nationalarchives/components/alert/story.njk",templateContext)}__nunjucks_module_dependencies__.templates={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.templates},__nunjucks_module_dependencies__.globals={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.globals},__nunjucks_module_dependencies__.extensions={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.extensions},__nunjucks_module_dependencies__.filters={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.filters},__nunjucks_module_dependencies__.assets={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.assets},__nunjucks_module_dependencies__.templates["src/nationalarchives/components/alert/story.njk"]={root:function root(env,context,frame,runtime,cb){var lineno=0,colno=0,output="";try{var macro_t_1=runtime.makeMacro(["params"],[],(function(l_params,kwargs){var callerFrame=frame;frame=new runtime.Frame,kwargs=kwargs||{},Object.prototype.hasOwnProperty.call(kwargs,"caller")&&frame.set("caller",kwargs.caller),frame.set("params",l_params);var t_2="",tasks=[];return tasks.push((function(callback){env.getTemplate("src/nationalarchives/components/alert/template.njk",!1,"src/nationalarchives/components/alert/story.njk",!1,(function(t_4,t_3){t_4?cb(t_4):callback(null,t_3)}))})),tasks.push((function(template,callback){template.render(context.getVariables(),frame,(function(t_6,t_5){t_6?cb(t_6):callback(null,t_5)}))})),tasks.push((function(result,callback){t_2+=result,callback(null)})),env.waterfall(tasks,(function(){})),frame=callerFrame,new runtime.SafeString(t_2)}));context.addExport("alert"),context.setVariable("alert",macro_t_1),output+="\n\n",output+=runtime.suppressValue((lineno=4,colno=8,runtime.callWrap(macro_t_1,"alert",context,[runtime.contextOrFrameLookup(context,frame,"params")])),env.opts.autoescape),cb(null,output+="\n")}catch(e){cb(runtime.handleError(e,lineno,colno))}}},nunjucksTemplate.__nunjucks_precompiled_template__=__nunjucks_module_dependencies__.templates["src/nationalarchives/components/alert/story.njk"],nunjucksTemplate.__nunjucks_module_dependencies__=__nunjucks_module_dependencies__,module.exports=nunjucksTemplate},"./src/nationalarchives/components/alert/template.njk":(module,exports,__webpack_require__)=>{const runtime=__webpack_require__("./node_modules/simple-nunjucks-loader/lib/cjs/runtime.js"),__nunjucks_module_dependencies__={},__nunjucks_template_import__dep_0=__webpack_require__("./src/nationalarchives/components/icon/template.njk");function nunjucksTemplate(ctx={}){const templateContext={__nunjucks_loader_assets__:__nunjucks_module_dependencies__.assets,...ctx};var nunjucks=(runtime&&runtime.default||runtime)({dev:!1,jinjaCompat:!1,isAsyncTemplate:!1},__nunjucks_module_dependencies__);return nunjucks.isAsync()?nunjucks.renderAsync("src/nationalarchives/components/alert/template.njk",templateContext):nunjucks.render("src/nationalarchives/components/alert/template.njk",templateContext)}__nunjucks_module_dependencies__.templates={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.templates},__nunjucks_module_dependencies__.globals={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.globals},__nunjucks_module_dependencies__.extensions={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.extensions},__nunjucks_module_dependencies__.filters={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.filters},__nunjucks_module_dependencies__.assets={...__nunjucks_template_import__dep_0.__nunjucks_module_dependencies__.assets},__nunjucks_module_dependencies__.templates["src/nationalarchives/components/alert/template.njk"]={root:function root(env,context,frame,runtime,cb){var lineno=0,colno=0,output="";try{var macro_t_1=runtime.makeMacro(["params"],[],(function(l_params,kwargs){var callerFrame=frame;frame=new runtime.Frame,kwargs=kwargs||{},Object.prototype.hasOwnProperty.call(kwargs,"caller")&&frame.set("caller",kwargs.caller),frame.set("params",l_params);var t_2="",tasks=[];return tasks.push((function(callback){env.getTemplate("src/nationalarchives/components/icon/template.njk",!1,"src/nationalarchives/components/alert/template.njk",!1,(function(t_4,t_3){t_4?cb(t_4):callback(null,t_3)}))})),tasks.push((function(template,callback){template.render(context.getVariables(),frame,(function(t_6,t_5){t_6?cb(t_6):callback(null,t_5)}))})),tasks.push((function(result,callback){t_2+=result,callback(null)})),env.waterfall(tasks,(function(){})),frame=callerFrame,new runtime.SafeString(t_2)}));context.addExport("icon"),context.setVariable("icon",macro_t_1),output+="\n\n","l"==runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"headingSize")?(output+="\n  ",frame.set("iconSize","xxl",!0),frame.topLevel&&context.setVariable("iconSize","xxl"),frame.topLevel&&context.addExport("iconSize","xxl"),output+="\n"):(output+="\n  ",frame.set("iconSize","m",!0),frame.topLevel&&context.setVariable("iconSize","m"),frame.topLevel&&context.addExport("iconSize","m"),output+="\n"),output+='\n\n<div class="da-alert ',runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"alertType")&&(output+="da-alert--",output+=runtime.suppressValue(runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"alertType"),env.opts.autoescape)),output+=" ",runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"withIcon")&&(output+="da-alert--with-icon"),output+='">\n  ',runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"withIcon")&&(output+='\n  <div class="da-alert__icon">\n    <div aria-hidden="true">',output+=runtime.suppressValue((lineno=14,colno=14,runtime.callWrap(macro_t_1,"icon",context,[{iconType:runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"iconType"),iconSize:runtime.contextOrFrameLookup(context,frame,"iconSize")}])),env.opts.autoescape),output+="</div>\n  </div>\n  "),output+='\n  <div class="da-alert__content">\n    ',runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"headingText")&&(output+='\n    <h2 class="da-alert__heading ',runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"headingSize")&&(output+="da-alert__heading--",output+=runtime.suppressValue(runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"headingSize"),env.opts.autoescape)),output+='">\n      ',output+=runtime.suppressValue(env.getFilter("d").call(context,runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"headingText"),"Your review is in progress"),env.opts.autoescape),output+="\n    </h2>\n    "),output+="\n    <p>",output+=runtime.suppressValue(env.getFilter("safe").call(context,env.getFilter("d").call(context,runtime.memberLookup(runtime.contextOrFrameLookup(context,frame,"params"),"bodyText"),"When the review is complete you will receive an email to <strong>jesse@ons.gov.uk</strong> with further instructions.")),env.opts.autoescape),cb(null,output+="</p>\n  </div>\n</div>\n")}catch(e){cb(runtime.handleError(e,lineno,colno))}}},nunjucksTemplate.__nunjucks_precompiled_template__=__nunjucks_module_dependencies__.templates["src/nationalarchives/components/alert/template.njk"],nunjucksTemplate.__nunjucks_module_dependencies__=__nunjucks_module_dependencies__,module.exports=nunjucksTemplate}}]);